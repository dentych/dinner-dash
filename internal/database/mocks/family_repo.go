// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/dentych/dinner-dash/internal/database (interfaces: FamilyRepo)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/dentych/dinner-dash/internal/models"
)

// MockFamilyRepo is a mock of FamilyRepo interface.
type MockFamilyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFamilyRepoMockRecorder
}

// MockFamilyRepoMockRecorder is the mock recorder for MockFamilyRepo.
type MockFamilyRepoMockRecorder struct {
	mock *MockFamilyRepo
}

// NewMockFamilyRepo creates a new mock instance.
func NewMockFamilyRepo(ctrl *gomock.Controller) *MockFamilyRepo {
	mock := &MockFamilyRepo{ctrl: ctrl}
	mock.recorder = &MockFamilyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFamilyRepo) EXPECT() *MockFamilyRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFamilyRepo) Delete(arg0 models.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFamilyRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFamilyRepo)(nil).Delete), arg0)
}

// GetById mocks base method.
func (m *MockFamilyRepo) GetById(arg0 int) (models.Family, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(models.Family)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFamilyRepoMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFamilyRepo)(nil).GetById), arg0)
}

// Insert mocks base method.
func (m *MockFamilyRepo) Insert(arg0 models.Family) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockFamilyRepoMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFamilyRepo)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockFamilyRepo) Update(arg0 models.Family) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFamilyRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFamilyRepo)(nil).Update), arg0)
}

// UserInFamily mocks base method.
func (m *MockFamilyRepo) UserInFamily(arg0, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInFamily", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInFamily indicates an expected call of UserInFamily.
func (mr *MockFamilyRepoMockRecorder) UserInFamily(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInFamily", reflect.TypeOf((*MockFamilyRepo)(nil).UserInFamily), arg0, arg1)
}
